/*

Ресторан "Ятъ". АлклгольFREE. Cильно маленький (4 столика, 8 работников).
Работа происходит по сменам. Всего 2 смены. Каждая смена состоит из администратора, повара и 2х официантов
Скидки могут быть 2х видов. По скидочной карте и назначенные для конкретного заказа. Если сразу 2 скидки, то суммируем.
Ресторан работал с 2021.12.01 по 2021.12.08
Данные заказов добавлял из условия - В одном заказе может быть 1, 2 или 3 человека. И каждый человек всегда заказывает Салат, Суп, Мясное, Гарнир, Десерт, Напиток. Политика заведения.
Кажая таблица содержит столбец id serial primary key. кое где - этом (например таблица "подозрительно"), но может понадобиться в будущем.  
При каждом создании схемы содержание заказов (количество человек за столиком и заказанные ими блюда) разное. Генерится рандомно.
При срабатывания тригера на изменение таблицы скидок сохраняется текущая дата (те когда производятся изменения). Не стал подделывать под период работы ресторана (2021.12.01 по 2021.12.08)
Больше и не знаю что обосновывать. Все почти как в задании (Аттестационное задание.pdf). Добавил таблицу "счета" еще.

*/

create schema ять;

set search_path = ять;

create table должность(
	id serial primary key,
	наименование varchar(20) not null unique
);

insert into должность
	(наименование)
values
	('Директор'),
	('Администратор'),
	('Повар'),
	('Официант')
;
	
create table сотруднки(
	id serial primary key,
	фио varchar(100) not null unique,
	должность_id integer not null references должность on delete cascade
);

insert into сотруднки
	(фио, должность_id)
values
	('Новиков Даниил Богданович', (select id from должность where наименование = 'Директор')),
	('Завьялова Вероника Глебовна', (select id from должность where наименование = 'Администратор')),
	('Кононова Алёна Андреевна', (select id from должность where наименование = 'Повар')),
	('Калашников Дмитрий Кириллович', (select id from должность where наименование = 'Повар')),
	('Акимов Максим Тимофеевич', (select id from должность where наименование = 'Официант')),
	('Родионов Руслан Сергеевич', (select id from должность where наименование = 'Официант')),
	('Дмитриев Даниил Андреевич', (select id from должность where наименование = 'Официант')),
	('Молчанова Арина Саввична', (select id from должность where наименование = 'Официант'))
;

create table меню(
	id serial primary key,
	наименование varchar(20) not null unique
);

insert into меню
	(наименование)
values
	('Основное меню'),
	('Десерты'),
	('Напитки')
;
	
create table типы_блюд(
	id serial primary key,
	наименование varchar(20) not null unique,
	меню_id integer not null references меню on delete cascade
);

insert into типы_блюд
	(наименование, меню_id)
values
	('Салаты', (select id from меню where наименование = 'Основное меню')),
	('Супы', (select id from меню where наименование = 'Основное меню')),
	('Мясные блюда', (select id from меню where наименование = 'Основное меню')),
	('Гарниры', (select id from меню where наименование = 'Основное меню')),
	('Чизкейки', (select id from меню where наименование = 'Десерты')),
	('Пироженое', (select id from меню where наименование = 'Десерты')),
	('Мороженое', (select id from меню where наименование = 'Десерты')),
	('Чай', (select id from меню where наименование = 'Напитки')),
	('Морс', (select id from меню where наименование = 'Напитки')),
	('Кофе', (select id from меню where наименование = 'Напитки'))
;

create table блюда(
	id serial primary key,
	наименование varchar(100) not null unique,
	цена numeric(10, 2) not null check ((цена > (0)::numeric)),
	тип_id integer not null references типы_блюд on delete cascade
);

insert into блюда
	(наименование, цена, тип_id)
values
	('Большой зеленый салат с авокадо и аргентинским соусом (160 г.)', 570, (select id from типы_блюд where наименование = 'Салаты')),
	('Хрустящие баклажаны, огурцы кимчи, мусс из угря (210 г.)', 600, (select id from типы_блюд where наименование = 'Салаты')),
	('Ростбиф с соусом тоннато, рукколой и вялеными томатами (180 г.)', 970, (select id from типы_блюд where наименование = 'Салаты')),
	('Окрошка домашняя с говядиной на квасе (100/200 г.)', 450, (select id from типы_блюд where наименование = 'Супы')),
	('Борщ с телятиной, подается с крученым салом, чесноком и зеленью (320/120 г.)', 590, (select id from типы_блюд where наименование = 'Супы')),
	('Том ям кунг (340 г.)', 890, (select id from типы_блюд where наименование = 'Супы')),
	('Куриное бедро с муссом из пармезана (290 г.)', 650, (select id from типы_блюд where наименование = 'Мясные блюда')),
	('Большая котлета с битыми огурцами и брусничным соусом (300/50/40 г.)', 1350, (select id from типы_блюд where наименование = 'Мясные блюда')),
	('Бефстроганов с грибам (320 г.)', 980, (select id from типы_блюд where наименование = 'Мясные блюда')),
	('Трюфельный батат с айоли (140/60 г.)', 490, (select id from типы_блюд where наименование = 'Гарниры')),
	('Картофельное пюре (200 г.)', 350, (select id from типы_блюд where наименование = 'Гарниры')),
	('Печеные овощи (240 г.)', 450, (select id from типы_блюд where наименование = 'Гарниры')),
	('Заливная клюква (150 г.)', 250, (select id from типы_блюд where наименование = 'Чизкейки')),
	('Манго-Маракуйя (150 г.)', 300, (select id from типы_блюд where наименование = 'Чизкейки')),
	('Буони (150 г.)', 200, (select id from типы_блюд where наименование = 'Чизкейки')),
	('Медовик на каштановом меду (150 г.)', 590, (select id from типы_блюд where наименование = 'Пироженое')),
	('Наполеон (160/30 г.)', 590, (select id from типы_блюд where наименование = 'Пироженое')),
	('Трубочка со сгущенкой (90 г.)', 150, (select id from типы_блюд where наименование = 'Пироженое')),
	('Шоколадный трюфель (3 шт./50 г.)', 450, (select id from типы_блюд where наименование = 'Мороженое')),
	('Мороженое пломбир/ шоколад (80 г.)', 150, (select id from типы_блюд where наименование = 'Мороженое')),
	('Клубничный суп с мороженым (120 г.)', 250, (select id from типы_блюд where наименование = 'Мороженое')),
	('Ассам', 300, (select id from типы_блюд where наименование = 'Чай')),
	('Молочный улун', 350, (select id from типы_блюд where наименование = 'Чай')),
	('Иван чай', 300, (select id from типы_блюд where наименование = 'Чай')),
	('Клюквенный', 250, (select id from типы_блюд where наименование = 'Морс')),
	('Облепиховый', 300, (select id from типы_блюд where наименование = 'Морс')),
	('Плодово-ягодный', 200, (select id from типы_блюд where наименование = 'Морс')),
	('Эспрессо (0,03 л.)', 130, (select id from типы_блюд where наименование = 'Кофе')),
	('Американо (0,2 л.)', 230, (select id from типы_блюд where наименование = 'Кофе')),
	('Капучино (0,2 л.)', 270, (select id from типы_блюд where наименование = 'Кофе'))
;

create table табель(
	id serial primary key,
	сотрудник_id integer not null references сотруднки on delete cascade,
	дата date not null
);

-- Работа идет по сменам. Через день.
-- 1 смена
with рабочие_дни (дата) as (
	values 
		('12/1/2021'::date),
		('12/3/2021'::date),
		('12/5/2021'::date),
		('12/7/2021'::date)
)
insert into табель	(сотрудник_id,  дата)
select с.id, д.дата
from сотруднки с, рабочие_дни д
where фио  in (
	'Новиков Даниил Богданович',		-- руководитель
	'Кононова Алёна Андреевна',		-- повар
	'Акимов Максим Тимофеевич',		-- официант
	'Родионов Руслан Сергеевич'			-- официант
	)
;
-- 2 смена
with рабочие_дни (дата) as (
	values 
		('12/2/2021'::date),
		('12/4/2021'::date),
		('12/6/2021'::date),
		('12/8/2021'::date)
)
insert into табель	(сотрудник_id,  дата)
select с.id, д.дата
from сотруднки с, рабочие_дни д
where фио  in (
	'Завьялова Вероника Глебовна',			-- руководитель
	'Калашников Дмитрий Кириллович',	-- повар
	'Дмитриев Даниил Андреевич',				-- официант
	'Молчанова Арина Саввична'				-- официант
	)
;

create table скидочные_карты(
-- Минимальная скидка по скидочной карте 5%
	id serial primary key,
	процент numeric(3, 0) not null check (процент <= 100),
	описание varchar(100) not null
);

insert into скидочные_карты
	(процент, описание)
values
	(5, 'Подарочная на открытие'),
	(10, 'Постоянный посетитель'),
	(15, 'Пожарная инспекция'),
	(20, 'Роспотребнадзор'),
	(25, 'Тёща директора')
;

create table заказы(
-- в ресторане всего 4 столика
	id serial primary key,
	дата timestamp not null,
	столик integer check (столик >= 1 and столик <= 4) not null,
	официант_id integer not null references сотруднки on delete cascade
);

insert into заказы
	(дата, столик, официант_id)
values
	-- заказы со скидочной картой
	('2021-12-04 12:16'::timestamp, 2, (select id from сотруднки where фио = 'Молчанова Арина Саввична')),
	-- открытый заказ 1
	('2021-12-08 13:17'::timestamp, 3, (select id from сотруднки where фио = 'Дмитриев Даниил Андреевич')),
	-- открытый заказ 2
	('2021-12-08 12:52'::timestamp, 4, (select id from сотруднки where фио = 'Молчанова Арина Саввична')),
	-- заказы со скидочной картой и со скидкой
	('2021-12-05 12:41'::timestamp, 1, (select id from сотруднки where фио = 'Акимов Максим Тимофеевич')),
	-- заказы со скидкой
	( '2021-12-07 13:47'::timestamp, 1, (select id from сотруднки where фио = 'Акимов Максим Тимофеевич')),
	('2021-12-01 12:05'::timestamp, 2, (select id from сотруднки where фио = 'Акимов Максим Тимофеевич')),
	('2021-12-03 11:10'::timestamp, 3, (select id from сотруднки where фио = 'Родионов Руслан Сергеевич')),
	-- заказы без скидкой
	('2021-12-06 13:49'::timestamp, 4, (select id from сотруднки where фио = 'Дмитриев Даниил Андреевич')),
	('2021-12-03 12:54'::timestamp, 1, (select id from сотруднки where фио = 'Акимов Максим Тимофеевич')),
	('2021-12-07 14:11'::timestamp, 2, (select id from сотруднки where фио = 'Родионов Руслан Сергеевич')),
	('2021-12-07 15:51'::timestamp, 3, (select id from сотруднки where фио = 'Родионов Руслан Сергеевич')),
	('2021-12-01 16:07'::timestamp, 4, (select id from сотруднки where фио = 'Родионов Руслан Сергеевич')),
	('2021-12-05 12:54'::timestamp, 1, (select id from сотруднки where фио = 'Акимов Максим Тимофеевич')),
	('2021-12-02 14:02'::timestamp, 2, (select id from сотруднки where фио = 'Дмитриев Даниил Андреевич')),
	('2021-12-04 14:51'::timestamp, 3, (select id from сотруднки where фио = 'Молчанова Арина Саввична')),
	('2021-12-06 16:00'::timestamp, 4, (select id from сотруднки where фио = 'Молчанова Арина Саввична')),
	( '2021-12-02 14:01'::timestamp, 1, (select id from сотруднки where фио = 'Дмитриев Даниил Андреевич')),
	('2021-12-01 18:24'::timestamp, 2, (select id from сотруднки where фио = 'Акимов Максим Тимофеевич')),
	('2021-12-06 19:04'::timestamp, 3, (select id from сотруднки where фио = 'Дмитриев Даниил Андреевич')),
	('2021-12-02 18:55'::timestamp, 4, (select id from сотруднки where фио = 'Молчанова Арина Саввична')),
	('2021-12-04 19:35'::timestamp, 1, (select id from сотруднки where фио = 'Дмитриев Даниил Андреевич')),
	('2021-12-05 18:43'::timestamp, 3, (select id from сотруднки where фио = 'Родионов Руслан Сергеевич')),
	('2021-12-03 17:01'::timestamp, 4, (select id from сотруднки where фио = 'Родионов Руслан Сергеевич')),
	('2021-12-08 12:05'::timestamp, 2, (select id from сотруднки where фио = 'Молчанова Арина Саввична'))
;

create table скидки(
	id serial primary key,
	заказ_id integer not null references заказы on delete cascade,
	процент numeric(3, 0) not null default 0 check (процент <= 100),
	скидочная_карта_id integer not null default 0,
	описание varchar(100) not null
);

insert into скидки
	(заказ_id , процент, скидочная_карта_id, описание)
values
	-- скидки по скидочной карте
	(1, (select процент from скидочные_карты where описание = 'Постоянный посетитель'), (select id from скидочные_карты where описание = 'Постоянный посетитель'), (select описание from скидочные_карты where описание = 'Постоянный посетитель')),
	(2, (select процент from скидочные_карты where описание = 'Пожарная инспекция'), (select id from скидочные_карты where описание = 'Пожарная инспекция'), (select описание from скидочные_карты where описание = 'Пожарная инспекция')),
	(3, (select процент from скидочные_карты where описание = 'Тёща директора'), (select id from скидочные_карты where описание = 'Тёща директора'), (select описание from скидочные_карты where описание = 'Тёща директора')),
	(4, (select процент from скидочные_карты where описание = 'Подарочная на открытие'), (select id from скидочные_карты where описание = 'Подарочная на открытие'), (select описание from скидочные_карты where описание = 'Подарочная на открытие')),
	-- скидки за косяки
	(4, 10, 0, 'Недогрели десерт'),
	(5, 15, 0, 'Долгое обслуживание'),
	(6, 90, 0, 'Муха в супе'),
	(7, 10, 0, 'Комплемент дня')
;

create table заказанные_блюда(
	id serial primary key,
	заказ_id integer not null references заказы on delete cascade,
	блюдо_id integer not null references блюда on delete cascade
);

/*
Заполняем таблицу заказанных блюд
в одном заказе может быть 1, 2 или 3 человека
один человек заказывает Салат, Суп, Мясное, Гарнир, Десерт, Напиток
 */
do
$code$
declare
	меню record;
	тип_блюда record;
	заказ_id заказанные_блюда.заказ_id%type;
	колво_чел int;
begin
	-- всего 24 заказа
	for заказ_id in 1..24 loop
		-- количество человек за столиком от 1 до 3
		for колво_чел in 1..round(1+random()*2) loop
			for меню in select * from меню loop
				-- генерим заказ для одного человека
				if меню.наименование = 'Основное меню' then
					-- Салат, суп, мясное, гарнир
					for тип_блюда in select * from типы_блюд where меню_id = меню.id  loop
							execute 'insert into заказанные_блюда (заказ_id , блюдо_id) values ($1, (select рб.id from блюда рб join типы_блюд ртб on рб.тип_id = ртб.id where ртб.id  =  $2 order by random() limit 1))'
								using заказ_id, тип_блюда.id;
					end loop;
				else
					-- Десерт и напиток
					execute 'insert into заказанные_блюда (заказ_id , блюдо_id) values ($1, (select рб.id from блюда рб join типы_блюд ртб on рб.тип_id = ртб.id join меню рм on рм.id = ртб.меню_id where рм.id  = $2 order by random() limit 1))'
						using заказ_id, меню.id;
				end if;
			end loop;
		end loop;
	end loop;
end
$code$
;

create table счета(
	id serial primary key,
	заказ_id integer not null references заказы on delete cascade,
	время timestamp not null
);

insert into счета
	(заказ_id, время)
values
	(3, '2021-12-08 14:32'::timestamp),
	(6, '2021-12-01 14:05'::timestamp),
	(12, '2021-12-01 18:27'::timestamp),
	(18, '2021-12-01 20:50'::timestamp),
	(14, '2021-12-02 15:22'::timestamp),
	(17, '2021-12-02 15:53'::timestamp),
	(20, '2021-12-02 22:05'::timestamp),
	(7, '2021-12-03 12:51'::timestamp),
	(9, '2021-12-03 14:54'::timestamp),
	(23, '2021-12-03 19:21'::timestamp),
	(1, '2021-12-04 16:02'::timestamp),
	(15, '2021-12-04 17:31'::timestamp),
	(21, '2021-12-04 22:35'::timestamp),
	(4, '2021-12-05 13:51'::timestamp),
	(13, '2021-12-05 15:54'::timestamp),
	(22, '2021-12-05 21:21'::timestamp),
	(8, '2021-12-06 15:33'::timestamp),
	(16, '2021-12-06 17:52'::timestamp),
	(19, '2021-12-06 21:24'::timestamp),
	(5, '2021-12-07 16:07'::timestamp),
	(10, '2021-12-07 16:41'::timestamp),
	(11, '2021-12-07 18:11'::timestamp),
	(24, '2021-12-08 13:25'::timestamp)	
;

create table подозрительно(
	id serial primary key,
	заказ_id integer not null references заказы on delete cascade,
	описание text not null,
	время timestamp not null,
	db_user_name text not null
);

create function проверка_на_обман() returns trigger language plpgsql as 
$function$
declare
	счет_выписан int = 0;
begin
	if old.процент <> new.процент then
	-- если изменение % скидки
		select count(*) from счета с into счет_выписан where с.заказ_id = old.заказ_id;
		if счет_выписан > 0 then
		-- если счет выписан
		-- подозреваем нарушение
			insert into подозрительно
				(заказ_id, описание, время, db_user_name)
			values
				(old.заказ_id, 'Попытка изменения скидки при выписанном счете', current_timestamp, current_user);
			return old;
		end if;
	end if;
	return new;
end
$function$
;

create trigger античит before update
	on скидки for each row
	execute function проверка_на_обман()
;

-- дата конечно будет сегдняшняя
update скидки set процент =  процент + 10 where заказ_id  in (6, 5);

create table платежи(
	id serial primary key,
	заказ_id integer not null references заказы on delete cascade,
	время timestamp not null,
	сумма numeric(10, 2) not null default 0
);

-- истина, если заказ закрыт
create function заказ_закрыт (integer) returns bool
	language sql as
$function$
select case
	when (select count(*) from ять.платежи рп where рп.заказ_id = $1) > 0 then true 
	else false
end
$function$
;

-- возвращает сумму заказанного без скидок
create function сумма_заказанного (integer) returns integer
	language  sql as
$function$
select sum(рб.цена) цена
	from ять.блюда рб
		join ять.заказанные_блюда рзб on рзб.блюдо_id = рб.id 
	where рзб.заказ_id = $1
$function$
;

-- возвращает % (сумму всех) скидок для заказа
create function сумма_скидок (integer) returns integer
	language  plpgsql as
$function$
declare
 	s integer; 
begin
	select coalesce(sum(рс.процент),0) from ять.скидки рс into s where рс.заказ_id = $1;
	if s > 100 then s = 100;
	end if;
	return s;
end
$function$
;

insert into платежи
	(заказ_id, время, сумма)
values
	(6, '2021-12-01 14:15'::timestamp, (select (select сумма_заказанного(6))*(1-((select сумма_скидок(6))/100::real)))),
	(12, '2021-12-01 18:37'::timestamp, (select (select сумма_заказанного(12))*(1-((select сумма_скидок(12))/100::real)))),
	(18, '2021-12-01 21:01'::timestamp, (select (select сумма_заказанного(18))*(1-((select сумма_скидок(18))/100::real)))),
	(14, '2021-12-02 15:32'::timestamp, (select (select сумма_заказанного(14))*(1-((select сумма_скидок(14))/100::real)))),
	(17, '2021-12-02 16:03'::timestamp, (select (select сумма_заказанного(17))*(1-((select сумма_скидок(17))/100::real)))),
	(20, '2021-12-02 22:15'::timestamp, (select (select сумма_заказанного(20))*(1-((select сумма_скидок(20))/100::real)))),
	(7, '2021-12-03 13:01'::timestamp, (select (select сумма_заказанного(7))*(1-((select сумма_скидок(7))/100::real)))),
	(9, '2021-12-03 15:04'::timestamp, (select (select сумма_заказанного(9))*(1-((select сумма_скидок(9))/100::real)))),
	(23, '2021-12-03 19:31'::timestamp, (select (select сумма_заказанного(23))*(1-((select сумма_скидок(23))/100::real)))),
	(1, '2021-12-04 16:12'::timestamp, (select (select сумма_заказанного(1))*(1-((select сумма_скидок(1))/100::real)))),
	(15, '2021-12-04 17:41'::timestamp, (select (select сумма_заказанного(15))*(1-((select сумма_скидок(15))/100::real)))),
	(21, '2021-12-04 22:45'::timestamp, (select (select сумма_заказанного(21))*(1-((select сумма_скидок(21))/100::real)))),
	(4, '2021-12-05 14:01'::timestamp, (select (select сумма_заказанного(4))*(1-((select сумма_скидок(4))/100::real)))),
	(13, '2021-12-05 16:04'::timestamp, (select (select сумма_заказанного(13))*(1-((select сумма_скидок(13))/100::real)))),
	(22, '2021-12-05 21:31'::timestamp, (select (select сумма_заказанного(22))*(1-((select сумма_скидок(22))/100::real)))),
	(8, '2021-12-06 15:43'::timestamp, (select (select сумма_заказанного(8))*(1-((select сумма_скидок(8))/100::real)))),
	(16, '2021-12-06 18:02'::timestamp, (select (select сумма_заказанного(16))*(1-((select сумма_скидок(16))/100::real)))),
	(19, '2021-12-06 21:34'::timestamp, (select (select сумма_заказанного(19))*(1-((select сумма_скидок(19))/100::real)))),
	(5, '2021-12-07 16:17'::timestamp, (select (select сумма_заказанного(5))*(1-((select сумма_скидок(5))/100::real)))),
	(10, '2021-12-07 17:01'::timestamp, (select (select сумма_заказанного(10))*(1-((select сумма_скидок(10))/100::real)))),
	(11, '2021-12-07 18:21'::timestamp, (select (select сумма_заказанного(11))*(1-((select сумма_скидок(11))/100::real)))),
	(24, '2021-12-08 13:45'::timestamp, (select (select сумма_заказанного(24))*(1-((select сумма_скидок(24))/100::real))))	
;

-- 2021-12-08 - последний день работы ресторана
create view выручка_за_сегодня as
	select
		рз.id номер,
		рз.дата,
		рз.столик,
		рс.фио  официант,
		(	select sum(рб.цена) цена
			from блюда рб
			join заказанные_блюда рзб on рзб.блюдо_id = рб.id 
			where рзб.заказ_id = рз.id
		) стоимость,
		(	(	select sum(рб.цена) цена
				from блюда рб
				join заказанные_блюда рзб on рзб.блюдо_id = рб.id 
				where рзб.заказ_id = рз.id
			) - рп.сумма
		) скидка,
		рп.сумма оплачено
	from
		заказы рз
		join сотруднки рс on рс.id = рз.официант_id 
		join заказанные_блюда рзб on рзб.заказ_id = рз.id
		join блюда рб on рзб.блюдо_id = рб.id
		join платежи рп on рз.id = рп.заказ_id
	where (select заказ_закрыт(рз.id)) and рз.дата::timestamp::date = '2021-12-08'
	group by рз.id, рз.дата, рз.столик, рс.фио, рп.сумма
;

create view причесанное_меню as
	select
		рм.наименование меню,
		ртб.наименование категория,
		рб.наименование блюдо,
		рб.цена
	from
		меню рм
		join типы_блюд ртб on рм.id = ртб.меню_id
		join блюда рб on рб.тип_id = ртб.id
	order by
		рм.наименование,
		ртб.наименование,
		рб.наименование
;

create view открытые_заказы as
	select
		рз.id номер,
		рз.дата,
		рз.столик,
		рс.фио официант,
		(select сумма_заказанного(рз.id)) "сумма заказа",
		(select сумма_скидок(рз.id)) "скидка",
		(select (select сумма_заказанного(рз.id)*((1-сумма_скидок(рз.id)/100::real)))) "к оплате",
		время "счет выписан"
	from заказы рз
		join сотруднки рс on рс.id = рз.официант_id 
		left join счета сч on рз.id = сч.заказ_id
	where not (select заказ_закрыт(рз.id))
;

create view все_скидки as
	select
			рз.id заказ,
			рз.дата,
			(select сумма_заказанного(рз.id)) "сумма заказа",
			рск.процент "% скидки",
			(select (select сумма_заказанного(рз.id)*(рск.процент/100::real))) "сумма скидки",
			рск.описание
		from
			заказы рз
			join сотруднки рс on рс.id = рз.официант_id 
			join скидки рск on рск.заказ_id = рз.id 
		where
			(select заказ_закрыт(рз.id))
		order by
			рз.дата
;

create view штатное_расписание as
	select рс.фио, рд.наименование должность
	from сотруднки рс
		join должность рд on рс.должность_id  = рд.id
;

create view рейтинг_по_выручке as
	select
		рс.фио,
		sum(рп.сумма) выручка
	from
		заказы рз
		join сотруднки рс on рс.id = рз.официант_id 
		join платежи рп on рп.id = рз.id 
	where (select заказ_закрыт(рз.id))
	group by рс.фио
	order by выручка desc 
;

-- дата подозрительной активности конечно будет сегдняшняя
create view подозрительная_активность as
	select 
		п.время,
		db_user_name,
		п.описание,
		п.заказ_id заказ,
		з.дата "дата заказа",
		с.фио официант
	from
		подозрительно п
		join заказы з on п.заказ_id = з.id 
		join сотруднки с on с.id = з.официант_id 
;

